type DataPoint = record {
  data_point_id: nat;
  target: bool;
  privileged_map: vec record { text; nat};
  predicted: bool;
  features: vec float64; 
  timestamp: nat64;
};

type AverageMetrics = record {
  statistical_parity_difference: opt float32;
  disparate_impact: opt float32;
  average_odds_difference: opt float32;
  equal_opportunity_difference: opt float32;
};

type PrivilegedIndex = record {
  variable_name: text;
  value: float32;
};

type Metrics = record {
  statistical_parity_difference: opt vec PrivilegedIndex;
  disparate_impact: opt vec PrivilegedIndex;
  average_odds_difference: opt vec PrivilegedIndex;
  equal_opportunity_difference: opt vec PrivilegedIndex;
  average_metrics: AverageMetrics;
  accuracy: opt float32;
  precision: opt float32;
  recall: opt float32;
  timestamp: nat64;
};

type Model = record {
  model_id: nat;
  model_name: text;
  owners: vec principal;
  data_points: vec DataPoint;
  metrics: Metrics;
  details: ModelDetails;
  metrics_history: vec Metrics;
};

type ModelDetails = record {
  description: text;
  framework: text;
  version: text;
  objective: text;
  url: text;
};

type User = record {
  user_id: principal;
  models: vec record { nat; Model };
};

type HashMap = vec record { key: text; value: nat };

type floatHashMap = vec record { key: text; value: float64 };

service : () -> {
    // User management
    "whoami": () -> (principal);
    "is_admin": () -> (bool);
    "add_admin": (text) -> ();
    "get_admins": () -> (vec principal);

    // Model management
    "add_model": (text, ModelDetails) -> (nat);
    "delete_model": (nat) -> ();
    "add_owner": (nat, principal) -> ();
    "get_owners": (nat) -> (vec principal);

    // Data point management
    "add_dataset": (nat, vec vec float64, vec bool, vec bool, HashMap) -> (); //New call for custom privileged fields
    "add_data_point": (nat, bool, vec nat, vec text, bool, vec float64) -> ();   
    "delete_data_point": (nat, nat) -> ();

    // Fairness metrics
    "calculate_statistical_parity_difference": (nat) -> (vec PrivilegedIndex, opt floatHashMap);
    "calculate_disparate_impact": (nat) -> (vec PrivilegedIndex, opt floatHashMap);
    "calculate_average_odds_difference": (nat) -> (vec PrivilegedIndex, opt floatHashMap);
    "calculate_equal_opportunity_difference": (nat) -> (vec PrivilegedIndex, opt floatHashMap);
    
    // Calculate all fairness metrics
    "calculate_all_metrics": (nat, opt floatHashMap) ->  (
      vec PrivilegedIndex, vec PrivilegedIndex, vec PrivilegedIndex, vec PrivilegedIndex, float32, float32, float32
    );

    // Example data
    //"add_example_data_points": (nat) -> ();

    // Model retrieval queries
    "get_all_models": () -> (vec Model) query;
    "get_model_data_points": (nat) -> (vec DataPoint) query;
    "get_model_metrics": (nat) -> (Metrics) query;
    "get_model": (nat) -> (Model) query;
    "test_function": () -> (bool);
}