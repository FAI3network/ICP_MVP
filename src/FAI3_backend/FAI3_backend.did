type JobType = variant {
    LLMFairness : record { model_evaluation_id: nat };
    ContextAssociationTest : record { metrics_bag_id: nat };
    LanguageEvaluation : record { language_model_evaluation_id: nat };
    AverageFairness : record { job_dependencies: vec nat };
    Unassigned;
};

type JobProgress = record {
    completed: nat64;
    target: nat64;
    call_errors: nat64;
    invalid_responses: nat64;
};

type Job = record {
  id: nat;
  model_id: nat;
  owner: principal;
  status: text;
  status_detail: opt text;
  timestamp: nat64;
  job_type: JobType;
  progress: JobProgress;
};

type DataPoint = record {
  data_point_id: nat;
  target: bool;
  privileged_map: vec record { text; nat};
  predicted: bool;
  features: vec float64; 
  timestamp: nat64;
};

type AverageMetrics = record {
  statistical_parity_difference: opt float32;
  disparate_impact: opt float32;
  average_odds_difference: opt float32;
  equal_opportunity_difference: opt float32;
};

type PrivilegedIndex = record {
  variable_name: text;
  value: float32;
};

type PrivilegedThreshold = opt vec record { text; record { float64; bool } };

type Metrics = record {
  statistical_parity_difference: opt vec PrivilegedIndex;
  disparate_impact: opt vec PrivilegedIndex;
  average_odds_difference: opt vec PrivilegedIndex;
  equal_opportunity_difference: opt vec PrivilegedIndex;
  average_metrics: AverageMetrics;
  accuracy: opt float32;
  precision: opt float32;
  recall: opt float32;
  timestamp: nat64;
};

type ContextAssociationTestResult = variant {
    Stereotype;
    AntiStereotype;
    Neutral;
    Other;
};

type ContextAssociationTestType = variant {
    Intrasentence;
    Intersentence;
};

type ContextAssociationTestDataPoint = record {
    data_point_id: nat;
    prompt: text;
    answer: opt text;
    result: opt ContextAssociationTestResult;
    error: bool;
    test_type: ContextAssociationTestType;
    timestamp: nat64;
};

type ContextAssociationTestMetrics = record {
    stereotype: nat32;
    anti_stereotype: nat32;
    neutral: nat32;
    other: nat32;
};

type ClassifierModelData = record {
     data_points: vec DataPoint;
     metrics: Metrics;
     metrics_history: vec Metrics;
};

type ContextAssociationTestMetricsBag = record {
    context_association_test_id: nat;
    general: ContextAssociationTestMetrics;
    intersentence: ContextAssociationTestMetrics;
    intrasentence: ContextAssociationTestMetrics;
    gender: ContextAssociationTestMetrics;
    race: ContextAssociationTestMetrics;
    religion: ContextAssociationTestMetrics;
    profession: ContextAssociationTestMetrics;
    error_count: nat32;
    error_rate: float32;
    total_queries: nat32;
    max_errors: nat32;
    shuffle_questions: bool;
    max_queries: nat64;
    timestamp: nat64;
    intrasentence_prompt_template: text;
    intersentence_prompt_template: text;
    seed: nat32;
    icat_score_intra: float32;
    icat_score_inter: float32;
    icat_score_gender: float32;
    icat_score_race: float32;
    icat_score_profession: float32;
    icat_score_religion: float32;
    general_lms: float32;
    general_ss: float32;
    general_n: nat32;
    icat_score_general: float32;
    data_points: vec ContextAssociationTestDataPoint;
};

type HashMap = vec record { key: text; value: nat };

type LLMDataPointCounterFactual = record {
    prompt: opt text;
    response: opt text;
    valid: bool;
    error: bool;
    target: bool;
    timestamp: nat64;
    predicted: opt bool;
    features: vec float64;
};

type LLMDataPoint = record {
    data_point_id: nat;
    target: bool;
    predicted: opt bool;
    features: vec float64;
    timestamp: nat64;
    prompt: text;
    response: opt text;
    valid: bool;
    error: bool;
    counter_factual: opt LLMDataPointCounterFactual;
};

type CounterFactualModelEvaluationResult = record {
  change_rate_overall: float32;
  change_rate_sensible_attributes: vec float32;
  total_sensible_attributes: vec nat32;
  sensible_attribute: text;
};

type ModelEvaluationResult = record {
    model_evaluation_id: nat;
    dataset: text;
    timestamp: nat64;
    metrics: Metrics;
    privileged_map: HashMap;
    data_points: opt vec DataPoint;
    queries: nat64;
    max_queries: nat64;
    max_errors: nat32;
    invalid_responses: nat32;
    errors: nat32;
    seed: nat32;
    llm_data_points: opt vec LLMDataPoint;
    prompt_template: opt text;
    counter_factual: opt CounterFactualModelEvaluationResult;
    finished: bool;
    canceled: bool;
    job_id: opt nat;
};

type LLMModelData = record {
     hugging_face_url: text;
     cat_metrics: opt ContextAssociationTestMetricsBag;
     cat_metrics_history: vec ContextAssociationTestMetricsBag;
     evaluations: vec ModelEvaluationResult;
     language_evaluations: vec LanguageEvaluationResult;
     average_fairness_metrics: opt AverageLLMFairnessMetrics;
     inference_provider: opt text;
};

type ModelType = variant {
    Classifier : ClassifierModelData;
    LLM : LLMModelData;
};

type CachedThresholds = record {
  thresholds: PrivilegedThreshold;
};

type Model = record {
  model_id: nat;
  model_name: text;
  owners: vec principal;
  details: ModelDetails;
  details_history: vec ModelDetailsHistory;
  model_type: ModelType;
  cached_thresholds: opt CachedThresholds;
  cached_selections: opt vec text;
  version: nat;
};

type ModelDetails = record {
  description: text;
  framework: text;
  objective: text;
  url: text;
};

type User = record {
  user_id: principal;
  models: vec record { nat; Model };
};

type ContextAssociationTestAPIResult = record {
  error_count: nat32;
  general_ss: float32;
  general_n: nat32;
  general_lms: float32;
  general: ContextAssociationTestMetrics;
  icat_score_general: float32;
  icat_score_gender: float32;
  icat_score_religion: float32;
  icat_score_profession: float32;
  icat_score_race: float32;
  icat_score_intra: float32;
  icat_score_inter: float32;
};

type GenericError = record {
    category: nat16;   // The error category (e.g., 100 for Input Errors)
    code: nat16;       // A specific error within the category
    message: text;     // Human-readable error message
    details: vec record { key: text; value: text }; // Additional info as key-value pairs  
};

type UpdatedDetails = record {
  name: text;
  details: ModelDetails;
};

type ModelDetailsHistory = record {
  name: text;
  details: ModelDetails;
  version: nat;
  timestamp: nat64;
};

type LLMMetricsAPIResult = record {
  "metrics": Metrics;
  "queries": nat64;
  "invalid_responses": nat32;
  "call_errors": nat32;
  "counter_factual": opt CounterFactualModelEvaluationResult;
};

type AverageLLMFairnessMetrics = record {
  model_id: nat;
  statistical_parity_difference: float32;
  disparate_impact: float32;
  average_odds_difference: float32;
  equal_opportunity_difference: float32;
  accuracy: float32;
  precision: float32;
  recall: float32;
  counter_factual_overall_change_rate: float32;
  model_evaluation_ids: vec nat;
};

type LanguageEvaluationDataPoint = record {
    prompt: text;
    response: opt text;
    valid: bool;
    error: bool;
    correct_answer: text;
};

type LanguageEvaluationMetrics = record {
    overall_accuracy: opt float32;
    accuracy_on_valid_responses: opt float32;
    format_error_rate: opt float32;
    n: nat32;
    error_count: nat32;
    invalid_responses: nat32;
    correct_responses: nat32;
    incorrect_responses: nat32;
};

type LanguageEvaluationResult = record {
    language_model_evaluation_id: nat;
    timestamp: nat64;
    languages: vec text;
    data_points: vec LanguageEvaluationDataPoint;
    prompt_templates: vec record {text; text};
    metrics: LanguageEvaluationMetrics;
    metrics_per_language: vec record {text; LanguageEvaluationMetrics};
    max_queries: nat64;
    seed: nat32;
    finished: bool;
    canceled: bool;
    job_id: opt nat;
};

type LanguageEvaluationCounts = record {
    total_count : nat64;
    per_language : vec record { text; nat64 };
};

type CatElementCounts = record {
    intrasentence_count : nat64;
    intersentence_count : nat64;
    total_count : nat64;
};

type LanguageEvaluationDataPointsResponse = variant {
  Ok : record { 0 : vec LanguageEvaluationDataPoint; 1 : nat64 };
  Err : GenericError;
};

service : () -> {
    //Job management
    "create_job": (nat) -> (nat);
    "get_job": (nat) -> (opt Job);
    "get_jobs": () -> (vec Job);
    "update_job_status": (nat, text, nat) -> ();
    "get_job_status": (nat) -> (opt text);
    "delete_job": (nat) -> ();
    "check_job_stopped": (nat) -> (bool);
    "stop_job": (nat) -> ();
    "get_latest_job": () -> (opt Job);
    "get_job_by_model_id": (nat) -> (opt Job);
    "get_job_by_owner": (principal) -> (vec Job);

    // User management
    "whoami": () -> (principal);
    "is_admin": () -> (bool);
    "add_admin": (text) -> ();
    "get_admins": () -> (vec principal);

    // Model management
    "add_classifier_model": (text, ModelDetails) -> (nat);
    "add_llm_model": (text, text, ModelDetails, opt text) -> (nat);
    "delete_model": (nat) -> ();
    "add_owner": (nat, principal) -> ();
    "get_owners": (nat) -> (vec principal);
    "update_model": (nat, text, ModelDetails, bool) -> (bool);
    "get_details_history": (nat) -> (vec ModelDetailsHistory);

    // Data point management
    "add_dataset": (nat, vec vec float64, vec bool, vec bool, HashMap, vec text, UpdatedDetails) -> (); //New call for custom privileged fields
    "add_data_point": (nat, bool, vec nat, vec text, bool, vec float64) -> ();   
    "delete_data_point": (nat, nat) -> ();

    // Fairness metrics
    "calculate_statistical_parity_difference": (nat) -> (vec PrivilegedIndex, PrivilegedThreshold);
    "calculate_disparate_impact": (nat) -> (vec PrivilegedIndex, PrivilegedThreshold);
    "calculate_average_odds_difference": (nat) -> (vec PrivilegedIndex, PrivilegedThreshold);
    "calculate_equal_opportunity_difference": (nat) -> (vec PrivilegedIndex, PrivilegedThreshold);
    
    // Calculate all fairness metrics
    "calculate_all_metrics": (nat, PrivilegedThreshold) ->  (
      vec PrivilegedIndex, vec PrivilegedIndex, vec PrivilegedIndex, vec PrivilegedIndex, float32, float32, float32
    );

    "calculate_llm_metrics": (nat, text, nat64, nat32, nat32) -> (variant { Ok: nat; Err: text });
    "average_llm_metrics": (nat, vec text) -> (variant {Ok: AverageLLMFairnessMetrics; Err: GenericError });
    "llm_fairness_datasets": () -> (vec record {text; nat64}) query;
    "calculate_all_llm_metrics": (nat, nat64, nat32, nat32) -> (variant { Ok: vec nat; Err: text }); 

    // Example data
    //"add_example_data_points": (nat) -> ();

    // Model retrieval queries
    "get_all_models": (nat64, nat64, opt text) -> (vec Model) query;
    "get_model_data_points": (nat) -> (vec DataPoint) query;
    "get_model_metrics": (nat) -> (Metrics) query;
    "get_model": (nat) -> (Model) query;
    "test_function": () -> (bool);

    "get_classifier_model_data": (Model) -> (ClassifierModelData) query;
    "get_llm_model_data": (Model) -> (LLMModelData) query;
    "get_llm_model_data_id": (nat) -> (LLMModelData) query;

    "context_association_test": (nat, nat64, nat32, bool, nat32) -> (variant { Ok: nat; Err: GenericError });
    get_cat_element_counts : () -> (CatElementCounts) query;
    "get_cat_metrics_bag": (nat, nat) -> (variant { Ok: ContextAssociationTestMetricsBag; Err: GenericError });

    "set_config": (text, text) -> ();
    "get_config": (text) -> (variant { Ok: text; Err: GenericError }) query;

    "llm_evaluate_languages": (model_id : nat, languages : vec text, max_queries : nat64, seed : nat32) -> (variant { Ok : nat; Err : text });
    get_language_evaluation_counts : () -> (LanguageEvaluationCounts) query;

    get_language_evaluation_data_points : (nat, nat, nat32, nat64) -> (LanguageEvaluationDataPointsResponse) query;
}